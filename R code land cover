## R CODE LAND COVER 

# setting pacchetto e directory 
library(raster)
install.packages("ggplot2")
library(ggplot2)
install.packages("patchwork")
library(patchwork) # for multiframe ggplot plotting

setwd("C:/laboratorio_telerilevamento/") # Windows

# NIR 1, RED 2, GREEN 3
defor1 <- brick("defor1_.png") #sovrapposizione di più bande per l'immagine 
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")

defor2 <- brick("defor2_.png")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

par(mfrow=c(1,2))
plotRGB(defor1, r=1, g=2, b=3, stretch="lin")
plotRGB(defor2, r=1, g=2, b=3, stretch="lin")

# Classificazione immagini caricate 

# DEFOR1
# 1. Get all the single values
singlenr1 <- getValues(defor1)
singlenr1
set.seed(99)

# 2. Classify
kcluster1 <- kmeans(singlenr1, centers = 3) #estrazione di tre centroidi, così da dividere in classi e poi il software misura la distanza da ogni cosa dla centroide 
kcluster1

# 3. Set values to a raster on the basis of so
defor1class <- setValues(defor1[[1]], kcluster1$cluster) # assegnazione di nuovi valori al raster 

# 4. Plottaggio 
cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(defor1class, col=cl)
# class 1: forest
# class 2: agriculture

# DEFOR2
# 1. Get all the single values
singlenr2 <- getValues(defor2)
singlenr2
#
# set.seed(99)

# 2. Classify
kcluster2 <- kmeans(singlenr2, centers = 3)
kcluster2

# 3. Set values to a raster on the basis of so
defor2class <- setValues(defor2[[1]], kcluster2$cluster) # assign new values to a raster object

# 4. plottaggio 
cl <- colorRampPalette(c('yellow','black','red'))(100)
plot(defor2class, col=cl)
# class 1: forest
# class 2: agriculture

# calcolo delle frequenze e delle percentuali (defor1) 
frequencies1 <- freq(defor1class)  #conta la frequenza di ogni elemento nell'oggetto 
tot1 = ncell(defor1class)  #conta numero di righe e colonne dell'oggetto 
percentages1 = frequencies1 * 100 /  tot1

##risulati ottenuti 
# percentuale di foreste : 89.83012
# percentuale di porzione agricola: 10.16988


# calcolo delle frequenze e delle percentuali (defor2) 
frequencies2 <- freq(defor2class)
tot2 = ncell(defor2class)
percentages2 = frequencies2 * 100 /  tot2 #ottengo le percentuali di presenza di ogni elemnto all'interno dell'immagine 

# creazione di una matrice con i valori di frequenza 
cover <- c("Forest","Agriculture") #il comando c permette la creazione di una matrice 
percent_1992 <- c(89.83, 10.16)
percent_2006 <- c(52.06, 47.93)

percentages <- data.frame(cover, percent_1992, percent_2006) #il comando permette l'unione delle tre matrici create 
percentages #visualizzazione di quanto prodotto 

# plottiamo le percentuali su dei grafici 
ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white")

ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")

p1 <- ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white")

p2 <- ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity", fill="white")

p1+p2


# stessi limiti di percentuale 
#ylim permette di mettere un valore massimo sull'asse delle y 
p1 <- ggplot(percentages, aes(x=cover, y=percent_1992, color=cover)) + geom_bar(stat="identity", fill="white") +
ylim(c(0,100))

p2 <- ggplot(percentages, aes(x=cover, y=percent_2006, color=cover)) + geom_bar(stat="identity",
fill="white") +
ylim(c(0,100))

p1+p2


